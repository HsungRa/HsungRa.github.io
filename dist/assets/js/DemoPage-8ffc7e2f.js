import{i as y,j as T,k as P,r as $,b,o as v,a as D,w as d,c as m,h as f}from"./index-58b569e0.js";import{_ as C,a as L,b as F,c as M,d as R}from"./todo-eb04d018.js";import{g as k}from"./StorageUtil-62a6d367.js";const w=_=>({Authorization:`Bearer ${_}`});class g{static readMarkdownFile(s,a,n,e="main"){const l=`https://api.github.com/repos/${s}/${a}/contents/${n}?ref=${e}`,p=JSON.parse(k("auth_user"));return new Promise((o,t)=>{y(l,null,w(p.accessToken),"").then(r=>{const i=T.Buffer.from(r.content,"base64").toString("utf-8");o(i)})})}static readLocalMarkdownFile(s){return new Promise((a,n)=>{fetch(`/${s}`).then(e=>{e.ok?a(e.text()):n(`fetch error! status: ${e.status}`)})})}static getDirectoryTree(s,a,n="",e="main"){const l=`https://api.github.com/repos/${s}/${a}/contents/${n}?ref=${e}`,p=JSON.parse(k("auth_user"));return new Promise((o,t)=>{y(l,null,w(p.accessToken),"").then(r=>{const i={name:n||"root",posts:[],children:[]};for(const c of r)if(c.type==="file")i.posts.push(c.name);else if(c.type==="dir"){const u=n?`${n}/${c.name}`:c.name;this.getDirectoryTree(s,a,u,e).then(h=>{i.children.push(h)})}o(i)}).catch(r=>{t(new Error(r||"Unknown error occurred."))})})}static getLocalDirectoryTree1(s){return new Promise((a,n)=>{fetch(`/api/directory-tree?path=${encodeURIComponent(s)}`).then(e=>{e.ok?a(e.json()):n(`fetch error! status: ${e.status}`)})})}static getLocalDirectoryTree(){return new Promise((s,a)=>{const n=Object.assign({"/public/posts/demo.md":C,"/public/posts/machine learning/key_worlds.md":L,"/public/posts/machine learning/learning_resource_link.md":F,"/public/posts/machine learning/popularity_libraries.md":M,"/public/posts/machine learning/todo.md":R}),e={name:"posts",filePath:"posts",posts:[],children:{}};for(const p in n){const t=p.replace("/public/posts/","").split("/");if(t.length===1)e.posts.push(t[0]);else{let r=e.children,i="posts";for(let c=0;c<t.length-1;c++){const u=t[c];i=`${i}/${u}`,r[u]||(r[u]={name:u,filePath:i,posts:[],children:{}}),c===t.length-2?r[u].posts.push(t[t.length-1]):r=r[u].children}}}const l=p=>Object.values(p.children).map(o=>({...o,children:l(o)}));s({...e,children:l(e)})})}static filterTree(s,a){const n={name:s.name,posts:s.posts.filter(e=>a.some(l=>e.toLowerCase().endsWith(l.toLowerCase()))),children:s.children.map(e=>this.filterTree(e,a))};return n.children=n.children.filter(e=>e.posts.length>0||e.children.length>0),n}}const x=P({__name:"DemoPage",setup(_){const s=$(null),a=()=>{g.readMarkdownFile("HsungRa","HsungRa.github.io","public/posts/demo.md","gh-pages").then(o=>{console.log(">>>>>>>>>>>>>>>>>>>>>readMarkdownFile",o)})},n=()=>{g.readLocalMarkdownFile("posts/demo.md").then(o=>{console.log(">>>>>>>>>>>>>>>>>>>>>readMarkdownFile",o)})},e=()=>{g.getDirectoryTree("HsungRa","HsungRa.github.io","public/posts","gh-pages").then(o=>{console.log(">>>>>>>>>>>>>>>>>>>>>getDirectoryTree",o)})},l=()=>{g.getLocalDirectoryTree("posts").then(o=>{console.log(">>>>>>>>>>>>>>>>>>>>>getDirectoryTree",o),s.value=o;const t=p("posts/java/spring");console.log(">>>>>>>>>>>>>>>>>>>>>getPosts posts/java/spring",t);const r=p("posts/machine learning");console.log(">>>>>>>>>>>>>>>>>>>>>getPosts posts/machine learning",r)})},p=o=>{try{if(!s.value)return;const t=(i,c)=>{if(i.filePath===c)return i;for(const u of i.children){const h=t(u,c);if(h)return h}return null},r=t(s.value,o);return r?r.posts:[]}catch(t){throw console.error("获取文件列表失败:",t),new Error(`无法获取目录 ${o} 下的文件`)}};return(o,t)=>{const r=b("a-button"),i=b("a-space");return v(),D(i,null,{default:d(()=>[m(r,{type:"primary",onClick:a},{default:d(()=>t[0]||(t[0]=[f("testReadMarkdownFile")])),_:1}),m(r,{type:"primary",onClick:n},{default:d(()=>t[1]||(t[1]=[f("testReadLocalMarkdownFile")])),_:1}),m(r,{type:"primary",onClick:e},{default:d(()=>t[2]||(t[2]=[f("testGetDirectoryTree")])),_:1}),m(r,{type:"primary",onClick:l},{default:d(()=>t[3]||(t[3]=[f("testGetLocalDirectoryTree")])),_:1})]),_:1})}}});export{x as default};
